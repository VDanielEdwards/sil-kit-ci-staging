name: sil-kit-ci/setup

description: Setup the environment for the other CI actions.

inputs:

  preset-name:
    description: The preset name from CMakePresets.json.
    required: true

  linux-docker-image:
    description: Docker image used under Linux
    required: true

  linux-c-compiler:
    description: C compiler used under Linux
    required: true

  linux-cxx-compiler:
    description: C++ compiler used under Linux
    required: true

  msvc-arch:
    description: Target architecture used under Windows/MSVC
    required: true

  msvc-toolset:
    description: Target toolset used under Windows/MSVC
    required: true

outputs:

  cmake-configure-args:
    description: Extra arguments passed to cmake during configuration
    value: ${{ join(steps.*.outputs.cmake-configure-args, ' ') }}

runs:
  using: composite
  steps:

    - name: compute directories
      uses: ./.github/actions/sil-kit-ci/dirs
      id: dirs
      with:
        preset-name: ${{ inputs.preset-name }}

    - name: (all) checkout sil-kit sources
      uses: actions/checkout@v4
      with:
        path: ${{ steps.dirs.outputs.cmake-source }}
        submodules: true

    - name: (linux, windows) cleanup build and package directories
      if: runner.os == 'Linux' || runner.os == 'Windows'
      shell: bash
      run: |
        rm -rf "${{ steps.dirs.outputs.cmake-build }}"
        rm -rf "${{ steps.dirs.outputs.cmake-package }}"

    - name: (linux, windows) create build and package directories
      if: runner.os == 'Linux' || runner.os == 'Windows'
      shell: bash
      run: |
        mkdir -p "${{ steps.dirs.outputs.cmake-build }}"
        mkdir -p "${{ steps.dirs.outputs.cmake-package }}"

    - name: (linux) select c compiler
      id: linux-cmake-configure-args-c-compiler
      if: runner.os == 'Linux'
      shell: bash
      run: echo 'cmake-configure-args=-DCMAKE_C_COMPILER=${{ inputs.linux-c-compiler }}' >> "$GITHUB_OUTPUT"

    - name: (linux) select c++ compiler
      id: linux-cmake-configure-args-cxx-compiler
      if: runner.os == 'Linux'
      shell: bash
      run: echo 'cmake-configure-args=-DCMAKE_CXX_COMPILER=${{ inputs.linux-cxx-compiler }}' >> "$GITHUB_OUTPUT"

    - name: (linux) pull docker image for building via cmake
      if: runner.os == 'Linux'
      shell: bash
      run: docker pull "${{ inputs.linux-docker-image }}"

    - name: (windows) setup msvc environment
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1.13.0
      with:
        arch: ${{ inputs.msvc-arch }}
        toolset: ${{ inputs.msvc-toolset }}
