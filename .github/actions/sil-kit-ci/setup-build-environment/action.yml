name: sil-kit-ci/setup-build-environment

inputs:
  preset-name:
    description: "The preset name from CMakePresets.json."
    required: true
  upload-testlog:
    description: "Upload gtest log with same name as preset-name"
    required: false
    default: true
    type: boolean
  cmake-args:
    description: "Additional CMake arguments"
    required: false
  do-package-symbols:
    description: "In Debug builds, split symbols and provide a zip package"
    required: false
    type: boolean
  do-package:
    description: "Run `cmake --target package` and upload artifact"
    required: false
    type: boolean
  retention-days:
    description: "How long we keep the artifacts"
    required: false
    type: number
    default: 14
  run-tests:
    description: "Run tests"
    required: false
    default: true
    type: boolean
  toolset:
    type: string
    default: '14.1'
    description: "MSVC tool set to use"
    required: false
  build-arch:
    type: string
    default: "x64"
    description: "MSVC build architecture to use"
    required: false
  linux-docker-image:
    type: string
    default: ghcr.io/mariusbgm/sil-kit-ci-ubuntu-22.04:main
    description: "Docker image used under Linux"
    required: false
 
outputs:
  package-name:
    description: artifact name of the distribution zip
    value: "${{ steps.cmake-package.outputs.package-name }}"
  package-path:
    description: file path of the distribution zip
    value: "${{ steps.cmake-package.outputs.package-path }}"
  symbols-package-path:
    description: file path of the symbols zip
    value: "${{ steps.cmake-package.outputs.symbols-package-path }}"
  symbols-package-name:
    description: artifact name of the symbols zip
    value: "${{ steps.cmake-package.outputs.symbols-package-name }}"
 
runs:
  using: composite
  steps:

    - name: (all) checkout sil-kit sources
      uses: actions/checkout@v4
      with:
        path: s/sil-kit
        submodules: true

    - name: (linux) create build directory
      run: mkdir -p b/linux
      if: runner.os == 'Linux'
      shell: bash

    - name: (linux) pull docker image for building via cmake
      run: docker pull "${{ inputs.linux-docker-image }}"
      if: runner.os == 'Linux'
      shell: bash

